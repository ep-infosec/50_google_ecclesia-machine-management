/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ecclesia/lib/network/hosts.h"

#include <string>

#include "gtest/gtest.h"
#include "absl/strings/string_view.h"
#include "ecclesia/lib/file/test_filesystem.h"

namespace ecclesia {
namespace {

class NameHasEtcHostsEntryTest : public testing::Test {
 public:
  NameHasEtcHostsEntryTest()
      : fs_(GetTestTempdirPath()), test_path_(fs_.GetTruePath("/etc/hosts")) {}

  // Populate the test /etc/hosts with the given contents.
  void PopulateHosts(absl::string_view contents) {
    fs_.CreateDir("/etc");
    fs_.CreateFile("/etc/hosts", contents);
  }

 protected:
  TestFilesystem fs_;
  // The path to /etc/hosts in the test filesystem.
  std::string test_path_;
};

TEST_F(NameHasEtcHostsEntryTest, MissingFile) {
  EXPECT_FALSE(
      NameHasEtcHostsEntry("my_hostname", fs_.GetTruePath("/does_not_exist")));
}

TEST_F(NameHasEtcHostsEntryTest, EmptyFile) {
  PopulateHosts("");
  EXPECT_FALSE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, NoMatchingEntry) {
  PopulateHosts(R"(::1 localhost
127.0.0.1 localhost

10.1.2.3  my_name my_name.fully.qualified
)");
  EXPECT_FALSE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, MatchingEntry) {
  PopulateHosts(R"(::1 localhost
127.0.0.1 localhost

10.1.2.3  my_hostname my_hostname.fully.qualified
10.9.8.7  other_name
)");
  EXPECT_TRUE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, MatchingEntryIsAlias) {
  PopulateHosts(R"(::1 localhost
127.0.0.1 localhost

10.1.2.3  primary_hostname secondary_hostname my_hostname
10.9.8.7  other_name
)");
  EXPECT_TRUE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, HandleComments) {
  PopulateHosts(R"(# this file is automatically generated
::1 localhost
127.0.0.1 localhost

# host-specific entries
10.1.2.3  my_hostname my_hostname.fully.qualified     # my entry
)");
  EXPECT_TRUE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, DontMatchNamesInComments) {
  PopulateHosts(R"(::1 localhost
127.0.0.1 localhost

10.1.2.3  my_name # my_hostname
)");
  EXPECT_FALSE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

TEST_F(NameHasEtcHostsEntryTest, DontMatchMoreQualifiedNames) {
  PopulateHosts(R"(::1 localhost
127.0.0.1 localhost

10.1.2.3  my_hostname.fully.qualified
)");
  EXPECT_FALSE(NameHasEtcHostsEntry("my_hostname", test_path_));
}

}  // namespace
}  // namespace ecclesia
